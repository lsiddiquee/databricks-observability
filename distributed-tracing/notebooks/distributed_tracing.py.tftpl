# Databricks notebook source
# MAGIC %md
# MAGIC # Distributed Tracing in Databricks with OpenTelemetry and Azure Monitor
# MAGIC
# MAGIC In this notebook, we will set up distributed tracing and logging for a Databricks notebook. Distributed tracing allows us to monitor and visualize requests as they propagate through different components of a system. This can be useful to identify performance bottlenecks or trace errors.
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ## Setup

# COMMAND ----------

from opentelemetry import trace
from opentelemetry.sdk.resources import Resource
from opentelemetry.propagate import extract
from opentelemetry.trace import SpanKind

from azure.monitor.opentelemetry import configure_azure_monitor

from random import randrange

import logging
import time

connection_string = "${app_insights_conn_str}"
resource = Resource.create({"service.name": "Databricks Notebook"})

configure_azure_monitor(connection_string=connection_string, resource=resource)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

logger.info("Inside notebook")

trace_context = dbutils.widgets.get("traceparent")
tracer = trace.get_tracer(__name__)

# COMMAND ----------

# MAGIC %md
# MAGIC ## Initializing span to join the tracing session started externally
# MAGIC

# COMMAND ----------

logger.info(f"Attempt to join an existing trace session with context: {trace_context}")

if trace_context is not None:
    caller_context = extract({ "traceparent": trace_context })
else:
    caller_context = None
span = tracer.start_span(name="Notebook Invoked", context=caller_context, kind=SpanKind.CONSUMER)


# COMMAND ----------

# MAGIC %md
# MAGIC ## Extract step

# COMMAND ----------

try:
    # Initializing an existing span context in the cell to ensure subsequent spans joins the distributed span
    with trace.use_span(span):
        with tracer.start_as_current_span(name='extract'):
            logger.info("Extract")
            time.sleep(randrange(start=3, stop=10))
except Exception as e:
    logger.exception(e)
    # As there is an exception and the "Notebook Invoked" span was not created using a 'with' block forcefully ending the span.
    span.end()
    raise


# COMMAND ----------

# MAGIC %md
# MAGIC ## Transform

# COMMAND ----------

try:
    # Initializing an existing span context in the cell to ensure subsequent spans joins the distributed span
    with trace.use_span(span):
        with tracer.start_as_current_span(name='transform'):
            logger.info("Transform")
            time.sleep(randrange(start=3, stop=10))
except Exception as e:
    logger.exception(e)
    # As there is an exception and the "Notebook Invoked" span was not created using a 'with' block forcefully ending the span.
    span.end()
    raise


# COMMAND ----------

# MAGIC %md
# MAGIC ## Load

# COMMAND ----------

try:
    # Initializing an existing span context in the cell to ensure subsequent spans joins the distributed span
    with trace.use_span(span):
        with tracer.start_as_current_span(name='load'):
            logger.info("Load")
            time.sleep(randrange(start=3, stop=10))
except Exception as e:
    logger.exception(e)
    # As there is an exception and the "Notebook Invoked" span was not created using a 'with' block forcefully ending the span.
    span.end()
    raise


# COMMAND ----------

# MAGIC %md
# MAGIC ## Gracefully closing the span

# COMMAND ----------

span.end()
