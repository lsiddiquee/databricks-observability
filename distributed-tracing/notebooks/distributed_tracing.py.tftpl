# Databricks notebook source
# MAGIC %md
# MAGIC # Distributed Tracing in Databricks with OpenTelemetry and Azure Monitor
# MAGIC
# MAGIC In this notebook, we will set up distributed tracing and logging for a Databricks notebook. Distributed tracing allows us to monitor and visualize requests as they propagate through different components of a system. This can be useful to identify performance bottlenecks or trace errors.
# MAGIC

# COMMAND ----------

# MAGIC %md
# MAGIC ## Setup
# MAGIC
# MAGIC Removing all existing widgets and installing the needed traceparent widget. This cell is commented as the widget should already be present in this notebook, if not: uncomment and run it before you comment it again.

# COMMAND ----------

trace_context = dbutils.widgets.get("traceparent")

# COMMAND ----------

# MAGIC %md
# MAGIC ## Execution 

# COMMAND ----------

from opentelemetry import trace
from opentelemetry.sdk.resources import Resource
from opentelemetry.propagate import extract

from azure.monitor.opentelemetry import configure_azure_monitor

from random import randrange

import logging
import time

connection_string = "${app_insights_conn_str}"
resource = Resource.create({"service.name": "Databricks Notebook"})

configure_azure_monitor(connection_string=connection_string, resource=resource)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

logger.info("Inside notebook")
logger.info(f"Attempt to join an existing trace session with context: {trace_context}")

headers = {
    "traceparent": trace_context
}

print(headers)

# Explicitly the tracer is being created in here to ensure that we create it with the correct context from the headers.
tracer = trace.get_tracer(__name__)
with tracer.start_as_current_span(name="Notebook Invoked", context=extract(headers)) as span:
    print(span.get_span_context())
    with tracer.start_as_current_span(name='extract'):
        logger.info("Extract")
        time.sleep(randrange(start=3, stop=10))
    with tracer.start_as_current_span(name='transform'):
        logger.info("Transform")
        time.sleep(randrange(start=3, stop=10))
    with tracer.start_as_current_span(name='load'):
        logger.info("Load")
        time.sleep(randrange(start=3, stop=10))
